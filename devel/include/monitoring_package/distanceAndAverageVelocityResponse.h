// Generated by gencpp from file monitoring_package/distanceAndAverageVelocityResponse.msg
// DO NOT EDIT!


#ifndef MONITORING_PACKAGE_MESSAGE_DISTANCEANDAVERAGEVELOCITYRESPONSE_H
#define MONITORING_PACKAGE_MESSAGE_DISTANCEANDAVERAGEVELOCITYRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace monitoring_package
{
template <class ContainerAllocator>
struct distanceAndAverageVelocityResponse_
{
  typedef distanceAndAverageVelocityResponse_<ContainerAllocator> Type;

  distanceAndAverageVelocityResponse_()
    : distance(0.0)
    , averageVelocityX(0.0)
    , averageVelocityY(0.0)  {
    }
  distanceAndAverageVelocityResponse_(const ContainerAllocator& _alloc)
    : distance(0.0)
    , averageVelocityX(0.0)
    , averageVelocityY(0.0)  {
  (void)_alloc;
    }



   typedef float _distance_type;
  _distance_type distance;

   typedef float _averageVelocityX_type;
  _averageVelocityX_type averageVelocityX;

   typedef float _averageVelocityY_type;
  _averageVelocityY_type averageVelocityY;





  typedef boost::shared_ptr< ::monitoring_package::distanceAndAverageVelocityResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::monitoring_package::distanceAndAverageVelocityResponse_<ContainerAllocator> const> ConstPtr;

}; // struct distanceAndAverageVelocityResponse_

typedef ::monitoring_package::distanceAndAverageVelocityResponse_<std::allocator<void> > distanceAndAverageVelocityResponse;

typedef boost::shared_ptr< ::monitoring_package::distanceAndAverageVelocityResponse > distanceAndAverageVelocityResponsePtr;
typedef boost::shared_ptr< ::monitoring_package::distanceAndAverageVelocityResponse const> distanceAndAverageVelocityResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::monitoring_package::distanceAndAverageVelocityResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::monitoring_package::distanceAndAverageVelocityResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::monitoring_package::distanceAndAverageVelocityResponse_<ContainerAllocator1> & lhs, const ::monitoring_package::distanceAndAverageVelocityResponse_<ContainerAllocator2> & rhs)
{
  return lhs.distance == rhs.distance &&
    lhs.averageVelocityX == rhs.averageVelocityX &&
    lhs.averageVelocityY == rhs.averageVelocityY;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::monitoring_package::distanceAndAverageVelocityResponse_<ContainerAllocator1> & lhs, const ::monitoring_package::distanceAndAverageVelocityResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace monitoring_package

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::monitoring_package::distanceAndAverageVelocityResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::monitoring_package::distanceAndAverageVelocityResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::monitoring_package::distanceAndAverageVelocityResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::monitoring_package::distanceAndAverageVelocityResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::monitoring_package::distanceAndAverageVelocityResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::monitoring_package::distanceAndAverageVelocityResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::monitoring_package::distanceAndAverageVelocityResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c7b4e3521ec9ca2962d77bc3d210feec";
  }

  static const char* value(const ::monitoring_package::distanceAndAverageVelocityResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc7b4e3521ec9ca29ULL;
  static const uint64_t static_value2 = 0x62d77bc3d210feecULL;
};

template<class ContainerAllocator>
struct DataType< ::monitoring_package::distanceAndAverageVelocityResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "monitoring_package/distanceAndAverageVelocityResponse";
  }

  static const char* value(const ::monitoring_package::distanceAndAverageVelocityResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::monitoring_package::distanceAndAverageVelocityResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 distance\n"
"float32 averageVelocityX\n"
"float32 averageVelocityY\n"
"\n"
;
  }

  static const char* value(const ::monitoring_package::distanceAndAverageVelocityResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::monitoring_package::distanceAndAverageVelocityResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.distance);
      stream.next(m.averageVelocityX);
      stream.next(m.averageVelocityY);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct distanceAndAverageVelocityResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::monitoring_package::distanceAndAverageVelocityResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::monitoring_package::distanceAndAverageVelocityResponse_<ContainerAllocator>& v)
  {
    s << indent << "distance: ";
    Printer<float>::stream(s, indent + "  ", v.distance);
    s << indent << "averageVelocityX: ";
    Printer<float>::stream(s, indent + "  ", v.averageVelocityX);
    s << indent << "averageVelocityY: ";
    Printer<float>::stream(s, indent + "  ", v.averageVelocityY);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MONITORING_PACKAGE_MESSAGE_DISTANCEANDAVERAGEVELOCITYRESPONSE_H
